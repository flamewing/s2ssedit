name: snapshots-windows

on:
  schedule:
    - cron: "0 01 * * *" # Daily at 01:00 UTC
  workflow_dispatch:

jobs:
  snapshots-windows:
    if: ${{ github.repository_owner == 'flamewing' }}
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Activity check
        shell: bash
        run: |
          DATEUTC=$(curl -sL https://api.github.com/repos/flamewing/s2ssedit/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')
          TIMESTAMP=$(date --utc -d "$DATEUTC" +%s)
          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo REPO_ALIVE=true >> $GITHUB_ENV
          else
            if [ $DAYS -gt 0 ]; then
              echo REPO_ALIVE=false >> $GITHUB_ENV
            else
              echo REPO_ALIVE=true >> $GITHUB_ENV
            fi
          fi
      - name: Install dependencies
        if: ${{ env.REPO_ALIVE == 'true' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          install:
            base-devel git p7zip
            mingw-w64-i686-toolchain mingw-w64-i686-binutils mingw-w64-i686-ntldd mingw-w64-i686-boost mingw-w64-i686-gtkmm3 mingw-w64-i686-cmake
      - name: Checkout code
        if: ${{ env.REPO_ALIVE == 'true' }}
        uses: actions/checkout@master
      - name: Configure
        if: ${{ env.REPO_ALIVE == 'true' }}
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G 'Unix Makefiles'
      - name: Build
        if: ${{ env.REPO_ALIVE == 'true' }}
        run: |
          cmake --build build -j2
      - name: Create package
        if: ${{ env.REPO_ALIVE == 'true' }}
        run: |
          mkdir snapshot
          cp build/*.exe snapshot/
          cp build/mdcomp/{libkosinski.dll,libnemesis.dll} snapshot/
          for ff in $(${MSYSTEM_PREFIX}/bin/ntldd -R snapshot/*.exe  | tr '\\' '/' | grep -io "$(cygpath -m ${MSYSTEM_PREFIX}).\+\.dll" | sort -u); do
            cp $(cygpath -u "$ff") snapshot/
          done
          mkdir -p snapshot/ui
          cp ui/*.png ui/*.ui snapshot/ui/
          mkdir -p snapshot/lib/gdk-pixbuf-2.0/2.10.0/loaders
          gdk-pixbuf-query-loaders --update-cache
          cp ${MSYSTEM_PREFIX}/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache snapshot/lib/gdk-pixbuf-2.0/2.10.0
          cp ${MSYSTEM_PREFIX}/lib/gdk-pixbuf-2.0/2.10.0/loaders/*.dll snapshot/lib/gdk-pixbuf-2.0/2.10.0/loaders
          mkdir -p snapshot/share/glib-2.0/schemas
          cp ${MSYSTEM_PREFIX}/share/glib-2.0/schemas/gschemas.compiled snapshot/share/glib-2.0/schemas
          mkdir -p snapshot/share/icons
          cp -R ${MSYSTEM_PREFIX}/share/icons/Adwaita ${MSYSTEM_PREFIX}/share/icons/hicolor snapshot/share/icons
          mkdir -p snapshot/share/gtk-3.0
          echo "[Settings]" > snapshot/share/gtk-3.0/settings.ini
          SNAPSHOT_PATH=$(cygpath -m $(pwd -P))
          echo "SNAPSHOT_PATH=${SNAPSHOT_PATH}" >> $GITHUB_ENV
          export BUILDFILE="v0.2.0.$(date --utc +'%Y%m%d')"
          echo "BUILDFILE=${BUILDFILE}" >> $GITHUB_ENV
          cd snapshot
          "/c/Program Files/7-Zip/7z.exe" -tzip a ${SNAPSHOT_PATH}/s2ssedit-${BUILDFILE}.zip -mx9 -mmt *
      - name: VirusTotal Scan
        if: ${{ env.REPO_ALIVE == 'true' }}
        id: scan_files
        uses: crazy-max/ghaction-virustotal@v2
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          github_token: ${{ github.token }}
          update_release_body: true
          files: |
            ${{ env.SNAPSHOT_PATH }}/s2ssedit-${{ env.BUILDFILE }}.zip
      - name: Generate VirusTotal Body
        if: ${{ env.REPO_ALIVE == 'true' }}
        run: |
          echo "Snapshot ${{ env.BUILDFILE }}" > ${{ env.SNAPSHOT_PATH }}/body.txt
          echo "" >> ${{ env.SNAPSHOT_PATH }}/body.txt
          echo "ðŸ›¡ [VirusTotal GitHub Action](https://github.com/crazy-max/ghaction-virustotal) analysis:" >> ${{ env.SNAPSHOT_PATH }}/body.txt
          echo "" >> ${{ env.SNAPSHOT_PATH }}/body.txt
          analysis="${{ steps.scan_files.outputs.analysis }}"
          while read -d, -r pair; do
            IFS='=' read -r filename analysisURL <<<"$pair"
            echo "* [$(basename $filename)]($analysisURL)" >> ${{ env.SNAPSHOT_PATH }}/body.txt
          done <<<"$analysis,"
      - name: Create release
        if: ${{ env.REPO_ALIVE == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: snapshot-${{ env.BUILDFILE }}
          release_name: Snapshot ${{ env.BUILDFILE }}
          body_path: ${{ env.SNAPSHOT_PATH }}/body.txt
          draft: true
          prerelease: false
      # Theses pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
      # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      - name: Upload snapshot
        if: ${{ env.REPO_ALIVE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.SNAPSHOT_PATH }}/s2ssedit-${{ env.BUILDFILE }}.zip
          asset_name: s2ssedit-${{ env.BUILDFILE }}.zip
          asset_content_type: application/zip
      - name: Finish release
        if: ${{ env.REPO_ALIVE == 'true' }}
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
